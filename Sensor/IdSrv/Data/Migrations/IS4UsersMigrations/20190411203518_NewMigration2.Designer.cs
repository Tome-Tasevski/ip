// <auto-generated />
using IdSrv.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IdSrv.Data.Migrations.IS4UsersMigrations
{
    [DbContext(typeof(IS4DbContext))]
    [Migration("20190411203518_NewMigration2")]
    partial class NewMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdSrv.Data.Models.IS4Tenant", b =>
                {
                    b.Property<string>("TenantId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginType");

                    b.Property<string>("Name");

                    b.Property<string>("Protocol");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("IdSrv.Data.Models.IS4User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ExternalUserId");

                    b.Property<bool>("IsExternalUser");

                    b.Property<string>("Password");

                    b.Property<string>("Provider");

                    b.Property<string>("TenantId");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IdSrv.Data.Models.OpenIDConfig", b =>
                {
                    b.Property<string>("OpenId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Authority");

                    b.Property<string>("ClientId");

                    b.Property<string>("GetClaimsFromUserInfoEndpoint");

                    b.Property<string>("SignInScheme");

                    b.Property<string>("SignOutScheme");

                    b.Property<string>("TenantId");

                    b.HasKey("OpenId");

                    b.HasIndex("TenantId");

                    b.ToTable("OpenIDConfigs");
                });

            modelBuilder.Entity("IdSrv.Data.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("IdSrv.Data.Models.SamlConfig", b =>
                {
                    b.Property<string>("SamlId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IdpEntityId");

                    b.Property<string>("IdpSigningCertificate");

                    b.Property<string>("LicenseKey");

                    b.Property<string>("Licensee");

                    b.Property<string>("MetadataPath");

                    b.Property<string>("NameIdClaimType");

                    b.Property<bool>("SaveTokens");

                    b.Property<string>("SignAuthenticationRequests");

                    b.Property<string>("SignInScheme");

                    b.Property<string>("SingleLogoutEndpoint");

                    b.Property<string>("SingleSignOnEndpoint");

                    b.Property<string>("SpEntityId");

                    b.Property<string>("SpSigningCertificate");

                    b.Property<string>("TenantId");

                    b.Property<int>("TimeComparisonTolerance");

                    b.HasKey("SamlId");

                    b.HasIndex("TenantId");

                    b.ToTable("SamlConfigs");
                });

            modelBuilder.Entity("IdSrv.Data.Models.UserRole", b =>
                {
                    b.Property<string>("UserRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("IdSrv.Data.Models.IS4User", b =>
                {
                    b.HasOne("IdSrv.Data.Models.IS4Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("IdSrv.Data.Models.OpenIDConfig", b =>
                {
                    b.HasOne("IdSrv.Data.Models.IS4Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("IdSrv.Data.Models.SamlConfig", b =>
                {
                    b.HasOne("IdSrv.Data.Models.IS4Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("IdSrv.Data.Models.UserRole", b =>
                {
                    b.HasOne("IdSrv.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("IdSrv.Data.Models.IS4User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
